@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using JamaisASec_Site.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AuthService authService

<PageTitle>Log in</PageTitle>

<h1 class="mt-3">Connexion</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Mot de passe</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                @* <div class="checkbox mb-3"> *@
                @*     <label class="form-label"> *@
                @*         <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" /> *@
                        
                @*     </label> *@
                @* </div> *@
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    @* <p> *@
                    @*     <a href="Account/ForgotPassword">Forgot your password?</a> *@
                    @* </p> *@
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">S'inscrire</a>
                    </p>
                    @* <p> *@
                    @*     <a href="Account/ResendEmailConfirmation">Resend email confirmation</a> *@
                    @* </p> *@
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <ArticleCarousel></ArticleCarousel>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {

        var Client = new ApiClient();
        var AuthObject = new Auth();
        AuthObject.email = Input.Email;
        AuthObject.password = Input.Password;

        var result = await Client.PostAsync<Auth>("Auth/login", AuthObject);

        if (result.error != null) 
            errorMessage = result.error;
        if (result.client != null) {

            authService.Login(result.client);
            RedirectManager.RedirectTo(ReturnUrl);

        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
