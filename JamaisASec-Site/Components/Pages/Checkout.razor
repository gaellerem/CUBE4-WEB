@rendermode InteractiveServer
@page "/checkout"
@using JamaisASec_Site.Models
@using System.Diagnostics
@inject CartService CartService;


<PageTitle>Panier</PageTitle>

<h3>Vous avez @CartService.SelectedArticles.Count article(s) dans votre panier.</h3>

@if (CartService.SelectedArticles.Count == 0)
{
    <p>Votre panier est vide.</p>
}
else
{
    @foreach (var articleCommande in CartService.SelectedArticles)
    {
        <div class="card w-100 mb-1">
            <div class="card-body">
                <h5 class="card-title">@articleCommande.Article.nom</h5>
                <p class="card-text">@articleCommande.Article.description</p>
                <p class="card-text">Quantité minimale : @articleCommande.Article.quantite_Min</p>
                <p class="card-text">Quantité commandée : @articleCommande.quantite</p>
                <blockquote class="card-text">@articleCommande.Article.prix_unitaire€</blockquote>
                <button class="btn btn-primary" type="button" @onclick="() => remove(articleCommande)">X</button>
            </div>
        </div>
    }

    <button class="btn btn-success" @onclick="UpdateStock">Mettre à jour le stock</button>
}

@code {


    public void remove(ArticlesCommande articleCommande)
    {
        CartService.remove(articleCommande);
        StateHasChanged();
    }

    public async Task UpdateStock()
    {
        var client = new ApiClient();
        foreach (var articleCommande in CartService.SelectedArticles)
            {
            
                articleCommande.Article.quantite -= articleCommande.quantite;
                // Créer un DTO pour l'article
                var articleDto = new ArticleDto
                    {
                        id = articleCommande.Article.id,
                        nom = articleCommande.Article.nom,
                        quantite = articleCommande.Article.quantite,
                        image = articleCommande.Article.image,
                        prix_unitaire = articleCommande.Article.prix_unitaire,
                        colisage = articleCommande.Article.colisage,
                        quantite_Min = articleCommande.Article.quantite_Min,
                        annee = articleCommande.Article.annee,
                        description = articleCommande.Article.description,
                        familles_id = articleCommande.Article.famille?.id,
                        maisons_id = articleCommande.Article.maison?.id,
                        fournisseurs_id = articleCommande.Article.fournisseur?.id
                    };
                await client.PutAsync<List<ArticleDto>>($"Articles/update/{articleDto.id}", articleDto);
            }

            StateHasChanged();
        

    }
}


